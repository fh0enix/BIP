import os
from dotenv import load_dotenv
from pathlib import Path
import hashlib
import base58
import requests
import random
import time
from ecdsa import SigningKey, SECP256k1
from multiprocessing import Process, Lock, cpu_count
from pathlib import Path
from pybloom_live import BloomFilter

# –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ .env –∑ –∫–æ—Ä–µ–Ω—è –ø—Ä–æ—î–∫—Ç—É (—è–∫—â–æ —Ñ–∞–π–ª —ñ—Å–Ω—É—î)
env_path = Path('.') / '.env'
load_dotenv(env_path)  # –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —á–∏—Ç–∞—î .env —ñ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î —É os.environ

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
    raise RuntimeError("TELEGRAM_TOKEN –∞–±–æ TELEGRAM_CHAT_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ —É .env –∞–±–æ –≤ –æ—Ç–æ—á–µ–Ω–Ω—ñ.")

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ª–æ–≤–Ω–∏–∫–∞ BIP39 ===
with open("english.txt", "r") as f:
    WORDLIST = [word.strip() for word in f.readlines()]

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Bloom-—Ñ—ñ–ª—å—Ç—Ä–∞ Legacy-–∞–¥—Ä–µ—Å (P2PKH) ===
BLOOM_FILTER_FILE = "legacy_addresses.bloom"
with open(BLOOM_FILTER_FILE, "rb") as bf_file:
    bloom = BloomFilter.fromfile(bf_file)

# === Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ===
def send_telegram(message):
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": message,
            "parse_mode": "Markdown"
        }
        requests.post(url, json=payload, timeout=10)
    except Exception as e:
        print(f"[!] Telegram –ø–æ–º–∏–ª–∫–∞: {e}")

# === –°—ñ–¥-—Ñ—Ä–∞–∑–∞ ‚Üí –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–ª—é—á ===
def generate_mnemonic():
    return ' '.join(random.choices(WORDLIST, k=12))

def mnemonic_to_private_key(mnemonic: str) -> bytes:
    return hashlib.sha256(mnemonic.encode()).digest()

# === –ü—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á ===
def private_key_to_public_key(priv_key: bytes) -> bytes:
    sk = SigningKey.from_string(priv_key, curve=SECP256k1)
    vk = sk.verifying_key
    return b'\x04' + vk.to_string()

# === Legacy (P2PKH) –∞–¥—Ä–µ—Å–∞ ===
def public_key_to_legacy_address(pub_key: bytes) -> str:
    pub_sha256 = hashlib.sha256(pub_key).digest()
    ripemd160 = hashlib.new('ripemd160', pub_sha256).digest()
    payload = b'\x00' + ripemd160
    checksum = hashlib.sha256(hashlib.sha256(payload).digest()).digest()[:4]
    return base58.b58encode(payload + checksum).decode()

# === –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É ===
def check_balance_and_activity(address: str):
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Bloom-—Ñ—ñ–ª—å—Ç—Ä —Ç—ñ–ª—å–∫–∏ –¥–ª—è Legacy –∞–¥—Ä–µ—Å
    if not address.startswith('1'):
        return 0.0, False  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –∞–¥—Ä–µ—Å–∏ –Ω–µ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ '1'

    if address not in bloom:
        # –ê–¥—Ä–µ—Å–∏ –Ω–µ–º–∞ —É —Ñ—ñ–ª—å—Ç—Ä—ñ ‚Äî –±–∞–ª–∞–Ω—Å —Ç–æ—á–Ω–æ 0, –Ω–µ–º–∞—î –∑–≤–µ—Ä—Ç–∞–Ω—å –¥–æ API
        return 0.0, False

    try:
        url = f"https://blockstream.info/api/address/{address}"
        r = requests.get(url, timeout=10)
        if r.status_code == 200:
            d = r.json()
            funded = d["chain_stats"]["funded_txo_sum"]
            spent = d["chain_stats"]["spent_txo_sum"]
            mem_funded = d["mempool_stats"]["funded_txo_sum"]
            mem_spent = d["mempool_stats"]["spent_txo_sum"]
            balance = (funded - spent + mem_funded - mem_spent) / 1e8
            active = d["chain_stats"]["tx_count"] > 0
            return balance, active
    except:
        pass
    return 0.0, False

# === –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –≥–∞–º–∞–Ω—Ü—ñ–≤ ===
def save_wallet(filename, lock, mnemonic, priv_key, address, balance):
    message = (
        f"üîê *–ó–Ω–∞–π–¥–µ–Ω–æ –≥–∞–º–∞–Ω–µ—Ü—å!*\n"
        f"`{filename}`\n"
        f"*–ê–¥—Ä–µ—Å–∞:* `{address}`\n"
        f"*–ë–∞–ª–∞–Ω—Å:* `{balance}` BTC\n"
        f"*Mnemonic:* `{mnemonic}`\n"
        f"*Private key:* `{priv_key}`"
    )
    with lock:
        with open(filename, "a") as f:
            f.write(f"Mnemonic: {mnemonic}\n")
            f.write(f"Private Key (hex): {priv_key}\n")
            f.write(f"Address: {address}\n")
            f.write(f"Balance: {balance} BTC\n")
            f.write("="*60 + "\n")
        send_telegram(message)

# === –û—Å–Ω–æ–≤–Ω–∞ —Ä–æ–±–æ—á–∞ —Ñ—É–Ω–∫—Ü—ñ—è ===
def worker(lock, id):
    checked = 0
    while True:
        mnemonic = generate_mnemonic()
        priv_key = mnemonic_to_private_key(mnemonic)
        pub_key = private_key_to_public_key(priv_key)

        try:
            addr = public_key_to_legacy_address(pub_key)
        except Exception as e:
            print(f"[!] –ü–æ–º–∏–ª–∫–∞ –∞–¥—Ä–µ—Å–∏: {e}")
            continue

        balance, active = check_balance_and_activity(addr)
        checked += 1
        print(f"[–ü–æ—Ç—ñ–∫ {id}] Legacy | {addr} | –ë–∞–ª–∞–Ω—Å: {balance} BTC | –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {active}")

        if balance > 0:
            save_wallet("found_wallets.txt", lock, mnemonic, priv_key.hex(), addr, balance)
            print(f"[‚úì] –ó –ë–ê–õ–ê–ù–°–û–ú: {addr} ‚Üí {balance} BTC")
        elif active:
            save_wallet("active_wallets.txt", lock, mnemonic, priv_key.hex(), addr, balance)
            print(f"[‚Ä¢] –ê–∫—Ç–∏–≤–Ω–∞: {addr}")

        time.sleep(0.3)

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    send_telegram("üöÄ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω–æ! –ü–æ—á–∏–Ω–∞—é –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ñ—Ä–∞–∑...")

    THREADS = min(cpu_count(), 4)
    lock = Lock()

    print(f"[üíª] –ó–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è {THREADS} –ø—Ä–æ—Ü–µ—Å(—ñ–≤)...\n")
    Path("found_wallets.txt").touch()
    Path("active_wallets.txt").touch()

    processes = []
    for i in range(THREADS):
        p = Process(target=worker, args=(lock, i+1))
        p.start()
        processes.append(p)

    for p in processes:
        p.join()
